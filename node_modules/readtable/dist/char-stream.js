'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEOS = isEOS;


const sourceInfo = new WeakMap();
class CharStream {
  constructor(source, filename = '') {
    sourceInfo.set(this, {
      source,
      filename,
      position: 0
    });
  }

  get sourceInfo() {
    // $FlowFixMe: decide on how to handle possible nullability
    const { filename, position } = sourceInfo.get(this);
    return { filename, position };
  }

  // returns the Unicode character charsToSkip ahead.
  peek(charsToSkip = 0) {
    // $FlowFixMe: decide on how to handle possible nullability
    const { source, position } = sourceInfo.get(this);
    if (position + charsToSkip >= source.length) return '';
    return source[position + charsToSkip];
  }

  // returns a string containing the next numChars characters.
  readString(numChars = 1) {
    const info = sourceInfo.get(this);
    // $FlowFixMe: decide on how to handle possible nullability
    const { source, position } = info;
    const str = source.slice(position, position + numChars);
    // $FlowFixMe: decide on how to handle possible nullability
    info.position += str.length;
    return str;
  }

  getSlice(start) {
    // $FlowFixMe: decide on how to handle possible nullability
    const { source, position } = sourceInfo.get(this);
    return source.slice(start, position);
  }
}

exports.default = CharStream;
function isEOS(char) {
  return char === '';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jaGFyLXN0cmVhbS5qcyJdLCJuYW1lcyI6WyJpc0VPUyIsInNvdXJjZUluZm8iLCJXZWFrTWFwIiwiQ2hhclN0cmVhbSIsImNvbnN0cnVjdG9yIiwic291cmNlIiwiZmlsZW5hbWUiLCJzZXQiLCJwb3NpdGlvbiIsImdldCIsInBlZWsiLCJjaGFyc1RvU2tpcCIsImxlbmd0aCIsInJlYWRTdHJpbmciLCJudW1DaGFycyIsImluZm8iLCJzdHIiLCJzbGljZSIsImdldFNsaWNlIiwic3RhcnQiLCJjaGFyIl0sIm1hcHBpbmdzIjoiOzs7OztRQWlEZ0JBLEssR0FBQUEsSzs7O0FBM0NoQixNQUFNQyxhQUFhLElBQUlDLE9BQUosRUFBbkI7QUFFZSxNQUFNQyxVQUFOLENBQWlCO0FBQzlCQyxjQUFZQyxNQUFaLEVBQTRCQyxXQUFtQixFQUEvQyxFQUFtRDtBQUNqREwsZUFBV00sR0FBWCxDQUFlLElBQWYsRUFBcUI7QUFDbkJGLFlBRG1CO0FBRW5CQyxjQUZtQjtBQUduQkUsZ0JBQVU7QUFIUyxLQUFyQjtBQUtEOztBQUVELE1BQUlQLFVBQUosR0FBNkI7QUFDM0I7QUFDQSxVQUFNLEVBQUVLLFFBQUYsRUFBWUUsUUFBWixLQUF5QlAsV0FBV1EsR0FBWCxDQUFlLElBQWYsQ0FBL0I7QUFDQSxXQUFPLEVBQUVILFFBQUYsRUFBWUUsUUFBWixFQUFQO0FBQ0Q7O0FBRUQ7QUFDQUUsT0FBS0MsY0FBc0IsQ0FBM0IsRUFBc0M7QUFDcEM7QUFDQSxVQUFNLEVBQUVOLE1BQUYsRUFBVUcsUUFBVixLQUF1QlAsV0FBV1EsR0FBWCxDQUFlLElBQWYsQ0FBN0I7QUFDQSxRQUFJRCxXQUFXRyxXQUFYLElBQTBCTixPQUFPTyxNQUFyQyxFQUE2QyxPQUFPLEVBQVA7QUFDN0MsV0FBT1AsT0FBT0csV0FBV0csV0FBbEIsQ0FBUDtBQUNEOztBQUVEO0FBQ0FFLGFBQVdDLFdBQW1CLENBQTlCLEVBQXlDO0FBQ3ZDLFVBQU1DLE9BQU9kLFdBQVdRLEdBQVgsQ0FBZSxJQUFmLENBQWI7QUFDQTtBQUNBLFVBQU0sRUFBRUosTUFBRixFQUFVRyxRQUFWLEtBQXVCTyxJQUE3QjtBQUNBLFVBQU1DLE1BQU1YLE9BQU9ZLEtBQVAsQ0FBYVQsUUFBYixFQUF1QkEsV0FBV00sUUFBbEMsQ0FBWjtBQUNBO0FBQ0FDLFNBQUtQLFFBQUwsSUFBaUJRLElBQUlKLE1BQXJCO0FBQ0EsV0FBT0ksR0FBUDtBQUNEOztBQUVERSxXQUFTQyxLQUFULEVBQWdDO0FBQzlCO0FBQ0EsVUFBTSxFQUFFZCxNQUFGLEVBQVVHLFFBQVYsS0FBdUJQLFdBQVdRLEdBQVgsQ0FBZSxJQUFmLENBQTdCO0FBQ0EsV0FBT0osT0FBT1ksS0FBUCxDQUFhRSxLQUFiLEVBQW9CWCxRQUFwQixDQUFQO0FBQ0Q7QUF0QzZCOztrQkFBWEwsVTtBQXlDZCxTQUFTSCxLQUFULENBQWVvQixJQUFmLEVBQXNDO0FBQzNDLFNBQU9BLFNBQVMsRUFBaEI7QUFDRCIsImZpbGUiOiJjaGFyLXN0cmVhbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5leHBvcnQgdHlwZSBTb3VyY2VJbmZvID0ge1xuICBmaWxlbmFtZTogc3RyaW5nLFxuICBwb3NpdGlvbjogbnVtYmVyXG59O1xuXG5jb25zdCBzb3VyY2VJbmZvID0gbmV3IFdlYWtNYXAoKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhclN0cmVhbSB7XG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogc3RyaW5nLCBmaWxlbmFtZTogc3RyaW5nID0gJycpIHtcbiAgICBzb3VyY2VJbmZvLnNldCh0aGlzLCB7XG4gICAgICBzb3VyY2UsXG4gICAgICBmaWxlbmFtZSxcbiAgICAgIHBvc2l0aW9uOiAwXG4gICAgfSk7XG4gIH1cblxuICBnZXQgc291cmNlSW5mbygpOiBTb3VyY2VJbmZvIHtcbiAgICAvLyAkRmxvd0ZpeE1lOiBkZWNpZGUgb24gaG93IHRvIGhhbmRsZSBwb3NzaWJsZSBudWxsYWJpbGl0eVxuICAgIGNvbnN0IHsgZmlsZW5hbWUsIHBvc2l0aW9uIH0gPSBzb3VyY2VJbmZvLmdldCh0aGlzKTtcbiAgICByZXR1cm4geyBmaWxlbmFtZSwgcG9zaXRpb24gfTtcbiAgfVxuXG4gIC8vIHJldHVybnMgdGhlIFVuaWNvZGUgY2hhcmFjdGVyIGNoYXJzVG9Ta2lwIGFoZWFkLlxuICBwZWVrKGNoYXJzVG9Ta2lwOiBudW1iZXIgPSAwKTogc3RyaW5nIHtcbiAgICAvLyAkRmxvd0ZpeE1lOiBkZWNpZGUgb24gaG93IHRvIGhhbmRsZSBwb3NzaWJsZSBudWxsYWJpbGl0eVxuICAgIGNvbnN0IHsgc291cmNlLCBwb3NpdGlvbiB9ID0gc291cmNlSW5mby5nZXQodGhpcyk7XG4gICAgaWYgKHBvc2l0aW9uICsgY2hhcnNUb1NraXAgPj0gc291cmNlLmxlbmd0aCkgcmV0dXJuICcnO1xuICAgIHJldHVybiBzb3VyY2VbcG9zaXRpb24gKyBjaGFyc1RvU2tpcF07XG4gIH1cblxuICAvLyByZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5leHQgbnVtQ2hhcnMgY2hhcmFjdGVycy5cbiAgcmVhZFN0cmluZyhudW1DaGFyczogbnVtYmVyID0gMSk6IHN0cmluZyB7XG4gICAgY29uc3QgaW5mbyA9IHNvdXJjZUluZm8uZ2V0KHRoaXMpO1xuICAgIC8vICRGbG93Rml4TWU6IGRlY2lkZSBvbiBob3cgdG8gaGFuZGxlIHBvc3NpYmxlIG51bGxhYmlsaXR5XG4gICAgY29uc3QgeyBzb3VyY2UsIHBvc2l0aW9uIH0gPSBpbmZvO1xuICAgIGNvbnN0IHN0ciA9IHNvdXJjZS5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyBudW1DaGFycyk7XG4gICAgLy8gJEZsb3dGaXhNZTogZGVjaWRlIG9uIGhvdyB0byBoYW5kbGUgcG9zc2libGUgbnVsbGFiaWxpdHlcbiAgICBpbmZvLnBvc2l0aW9uICs9IHN0ci5sZW5ndGg7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGdldFNsaWNlKHN0YXJ0OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIC8vICRGbG93Rml4TWU6IGRlY2lkZSBvbiBob3cgdG8gaGFuZGxlIHBvc3NpYmxlIG51bGxhYmlsaXR5XG4gICAgY29uc3QgeyBzb3VyY2UsIHBvc2l0aW9uIH0gPSBzb3VyY2VJbmZvLmdldCh0aGlzKTtcbiAgICByZXR1cm4gc291cmNlLnNsaWNlKHN0YXJ0LCBwb3NpdGlvbik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRU9TKGNoYXI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gY2hhciA9PT0gJyc7XG59XG4iXX0=